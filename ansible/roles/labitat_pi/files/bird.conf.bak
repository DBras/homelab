#
# BIRD 2 configuration for AS198886 DBRAS-AS - labitat instance
#

log syslog all;
#debug protocols all;
debug protocols { events, states };

watchdog warning 5 s;
watchdog timeout 30 s;

timeformat base     iso long;
timeformat log      iso long;
timeformat protocol iso long;
timeformat route    iso long;

########### ASN and IP setup ##############

# Own specific configuration
define local_labitat_ipv4 = 10.42.1.82; # Not used
define local_labitat_ipv6 = 2a01:4262:1ab:20::82; # Labitat peering
define local_labix_ipv4   = 185.0.29.11; # LabIX peering
define local_labix_ipv6   = 2001:7f8:149:1ab::19:8886:1; # LabIX peering
define global_ipv4        = 185.38.175.82; # Router ID
define global_ipv6        = 2a0e:8f02:2251::1; # Not used

router id                 global_ipv4; # Used for BGP
define local_asn          = 198886;

# Peering specific configuration
define hafnium_labitat_ipv6 = 2a01:4262:1ab:20::81;
define labitat_labitat_ipv6 = 2a01:4262:1ab:20::1;

define labitat_asn  = 205235;
define hafnium_asn  = 211153;
define labix_rs_asn = 60247;
define bgptool_asn  = 212232; # External Route Collector. See https://bgp.tools/as/211153

# Allowed and recognized IP addresses
# You can also do '2a0e:8f02:2250::/44{44,48}'
# This allows for announcing any size between 44 and 48
define local_prefixes_v6 = [
	2a0e:8f02:2251::/48
];

define local_prefixes_more_specific_v6 = [
	2a0e:8f02:2251::/48{49,128}
];

define hafnium_prefixes_v6 = [
	2a10:2a80:2190::/44,
	2a0e:8f02:f034::/48
];

########### functions and filters ##############

# recognise default route
function is_default_route() {
	case net.type {
		#NET_IP4: if net = 0.0.0.0/0 then return true;
		NET_IP6: if net = ::/0 then return true;
	}
	return false;
}

# regognise customer routes
function is_customer_route() {
	case net.type {
		#NET_IP4: if net ~ local_prefixes_v4 then return true;
		NET_IP6: if net ~ local_prefixes_v6 then return true;
	}
	return false;
}

# customer import
function peer_import(int peer_asn; prefix set peer_prefixes) {
	if net !~ peer_prefixes then reject;
	if bgp_path.first != peer_asn then reject;
	# if is_v6_rpki_invalid() then
	# {
	# 	print "Ignore RPKI invalid ", net, " for ASN ", bgp_path.last;
	# 	reject;
	# }
	accept;
}

function honor_graceful_shutdown()
{
	# RFC 8326 Graceful BGP Session Shutdown
	if (65535, 0) ~ bgp_community then {
		bgp_local_pref = 0;
	}
}

########### Basic protocols ##############

protocol device {}

protocol direct {
#	ipv4;
	ipv6;
}

########### RPKI things ##############

# roa4 table r4;
# roa6 table r6;

# protocol rpki {
# 	# expire defaults to 7200 sec
# 	roa6 { table r6; };
#
# 	remote 127.0.0.1 port 3323; #RTR via routinator
#
# 	retry keep 90;
# 	refresh keep 600;
# }

# function is_v6_rpki_invalid () {
# 	return (roa_check(r6, net, bgp_path.last_nonaggregated) = ROA_INVALID);
# }

########### Filters ##############

# Export to kernel network driver
filter kernel_export {
	if source !~ [ RTS_BGP, RTS_STATIC ] then reject;
	if is_default_route() then accept;
	if is_customer_route() then accept;
	reject;
}

# Route views
## We only want to export what we can see from peers, not our own prefixes
filter routesharing_export {
	if source !~ [ RTS_BGP, RTS_STATIC ] then reject;
	if is_default_route() then reject;
	if net ~ local_prefixes_more_specific_v6 then reject;
	accept;
}

# Transit
filter transit_import {
	honor_graceful_shutdown();
	# if is_v6_rpki_invalid() then
	# {
	# 	print "Ignore RPKI invalid ", net, " for ASN ", bgp_path.last;
	# 	reject;
	# }
	accept;
}

filter transit_export {
	if !is_customer_route() then reject;
	accept;
}

########### More specific protocols ##############

protocol static static6 {
	ipv6;
	route 2a0e:8f02:2251::/48 unreachable;
}

protocol kernel kernel6 {
	ipv6 {
		import all;
		export filter kernel_export;
	};
	learn;
	persist;
	graceful restart;
	merge paths;
}

########### Transit setup ##############

protocol bgp labitat_ipv6 {
	local local_labitat_ipv6 as local_asn;
	neighbor labitat_labitat_ipv6 as labitat_asn;
	passive;
	ipv6 {
		import limit off;
		receive limit off;
		import keep filtered on;
		import filter transit_import;
		export filter transit_export;
	};
}

########### Peering setup ##############

template bgp bgp_peer {
	default bgp_local_pref 120;
	ttl security;
}

# Peering - Hafnium
protocol bgp hafnium_ipv6 from bgp_peer {
	local local_labitat_ipv6 as local_asn;
	neighbor hafnium_labitat_ipv6 as hafnium_asn;
	ipv6 {
		import limit 10 action block;
		receive limit 20 action disable;
		import keep filtered on;
		import filter { peer_import(hafnium_asn, hafnium_prefixes_v6); };
		export filter transit_export;
	};
}

# Route views
## BGP.tools routeshare
# protocol bgp bgptools_ipv6 from bgp_peer {
#         local 2a01:4262:1ab:20::81 as local_asn;
#         neighbor 2a0c:2f07:9459::b5 as bgptool_asn;
#         multihop 255;
#         ipv6 {
#                 receive limit 2 action disable;
#                 import none;
#                 export table;
#                 export filter routesharing_export;
#         };
# }
